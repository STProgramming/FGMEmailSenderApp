// <auto-generated />
using System;
using FGMEmailSenderApp.Models.EntityFrameworkModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FGMEmailSenderApp.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("LastNameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewsSenderAggrement")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Cargo", b =>
                {
                    b.Property<int>("IdCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCargo"), 1L, 1);

                    b.Property<int>("CapCityDelivery")
                        .HasColumnType("int");

                    b.Property<int>("CapCityLoading")
                        .HasColumnType("int");

                    b.Property<string>("CompanyReceiverCargoEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyReceiverCargoIva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySenderCargoEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySenderCargoIva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanySenderIdCompany")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("DepthCargo")
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("DescriptionCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_IdCompanyReceiver")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdCompanySender")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdDepartmentDelivery")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdDepartmentLoading")
                        .HasColumnType("int");

                    b.Property<decimal>("HeightCargo")
                        .HasColumnType("decimal(7,4)");

                    b.Property<decimal>("LenghtCargo")
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("LoadingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadingDate")
                        .HasColumnType("Date");

                    b.Property<string>("NoteCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WeightCargo")
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("IdCargo");

                    b.HasIndex("CompanySenderIdCompany");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.CargoEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CargoesIdCargo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_IdCargo")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdStatusCargo")
                        .HasColumnType("int");

                    b.Property<string>("FK_TitleCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCargoesIdStatusCargo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoesIdCargo");

                    b.HasIndex("StatusCargoesIdStatusCargo");

                    b.ToTable("CargoEvent");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCity"), 1L, 1);

                    b.Property<string>("CapCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentIdDepartment")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdCountry")
                        .HasColumnType("int");

                    b.Property<int>("FK_IdDepartment")
                        .HasColumnType("int");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCity");

                    b.HasIndex("DepartmentIdDepartment");

                    b.HasIndex("FK_IdCountry");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Company", b =>
                {
                    b.Property<int>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompany"), 1L, 1);

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIva")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdCompany");

                    b.HasIndex("IdUser")
                        .IsUnique()
                        .HasFilter("[IdUser] IS NOT NULL");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCountry"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCountry");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartment"), 1L, 1);

                    b.Property<string>("CodeDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDepartment");

                    b.HasIndex("FK_IdCountry");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Request", b =>
                {
                    b.Property<int>("IdRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequest"), 1L, 1);

                    b.Property<string>("DescriptionRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTypesRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Response")
                        .HasColumnType("bit");

                    b.Property<int>("TypesRequestIdTypeRequest")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdRequest");

                    b.HasIndex("TypesRequestIdTypeRequest");

                    b.HasIndex("UserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.StatusCargo", b =>
                {
                    b.Property<int>("IdStatusCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusCargo"), 1L, 1);

                    b.Property<string>("NameStatusCargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStatusCargo");

                    b.ToTable("StatusCargo");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.TypeRequest", b =>
                {
                    b.Property<int>("IdTypeRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeRequest"), 1L, 1);

                    b.Property<string>("TypeNameRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeRequest");

                    b.ToTable("TypesRequest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Cargo", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.Company", "CompanySender")
                        .WithMany("Cargos")
                        .HasForeignKey("CompanySenderIdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanySender");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.CargoEvent", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.Cargo", "Cargoes")
                        .WithMany("CargoEvents")
                        .HasForeignKey("CargoesIdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.StatusCargo", "StatusCargoes")
                        .WithMany("CargosEvent")
                        .HasForeignKey("StatusCargoesIdStatusCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargoes");

                    b.Navigation("StatusCargoes");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.City", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.Department", null)
                        .WithMany("City")
                        .HasForeignKey("DepartmentIdDepartment");

                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("FK_IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Company", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", "User")
                        .WithOne("Company")
                        .HasForeignKey("FGMEmailSenderApp.Models.EntityFrameworkModels.Company", "IdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Department", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.Country", "Country")
                        .WithMany("Departments")
                        .HasForeignKey("FK_IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Request", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.TypeRequest", "TypesRequest")
                        .WithMany("Requests")
                        .HasForeignKey("TypesRequestIdTypeRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId");

                    b.Navigation("TypesRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.ApplicationUser", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Cargo", b =>
                {
                    b.Navigation("CargoEvents");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Company", b =>
                {
                    b.Navigation("Cargos");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.Department", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.StatusCargo", b =>
                {
                    b.Navigation("CargosEvent");
                });

            modelBuilder.Entity("FGMEmailSenderApp.Models.EntityFrameworkModels.TypeRequest", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
